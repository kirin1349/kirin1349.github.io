[1,["29y9plxyBGHI5gLgrMiY+7","44MN68HhJMq6UK8dHsz1Aw","704QnzOQBL/a/YPqWAOsyU","80djDV6BZC55eSEk+sesZ7"],["node","texture","_effectAsset","root","data","_spriteFrame"],[["cc.EffectAsset",["_name","shaders","techniques"],0],["cc.Material",["_name","_techniqueData"],2,11],["cc.Prefab",["_name"],2],["cc.Node",["_name","_components","_prefab","_contentSize","_trs"],2,9,4,5,7],["cc.Sprite",["_sizeMode","node","_materials","_spriteFrame"],2,1,3,6],["cc.Widget",["_alignFlags","_originalWidth","_originalHeight","node"],0,1],["cc.PrefabInfo",["root"],3,1]],[[0,0,1,2,4],[1,0,1,2],[2,0,2],[3,0,1,2,3,4,2],[4,0,1,2,3,2],[5,0,1,2,3,4],[6,0,1]],[[[[0,"guide-mask",[{"hash":2648790355,"record":null,"name":"guide-mask|vs|fs","glsl3":{"vert":"\nprecision highp float;\nuniform CCGlobal {\n  mat4 cc_matView;\n  mat4 cc_matViewInv;\n  mat4 cc_matProj;\n  mat4 cc_matProjInv;\n  mat4 cc_matViewProj;\n  mat4 cc_matViewProjInv;\n  vec4 cc_cameraPos;\n  vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_screenScale;\n};\nuniform CCLocal {\n  mat4 cc_matWorld;\n  mat4 cc_matWorldIT;\n};\nin vec3 a_position;\nin vec4 a_color;\nout vec4 v_color;\nin vec2 a_uv0;\nout vec2 v_uv0;\nvoid main () {\n  vec4 pos = vec4(a_position, 1);\n  #if CC_USE_MODEL\n  pos = cc_matViewProj * cc_matWorld * pos;\n  #else\n  pos = cc_matViewProj * pos;\n  #endif\n  v_uv0 = a_uv0;\n  v_color = a_color;\n  gl_Position = pos;\n}","frag":"\nprecision highp float;\n#if USE_ALPHA_TEST\n  uniform ALPHA_TEST {\n    float alphaThreshold;\n  };\n#endif\nvoid ALPHA_TEST (in vec4 color) {\n  #if USE_ALPHA_TEST\n      if (color.a < alphaThreshold) discard;\n  #endif\n}\nvoid ALPHA_TEST (in float alpha) {\n  #if USE_ALPHA_TEST\n      if (alpha < alphaThreshold) discard;\n  #endif\n}\nin vec4 v_color;\nuniform Constant{\n  vec4 maskColor;\n  vec2 resolution;\n  vec2 focusSize;\n  vec2 focusCenter;\n  float focusShape;\n  float focusRadius;\n};\nin vec2 v_uv0;\n#if USE_TEXTURE\nuniform sampler2D texture;\n#endif\nvoid main () {\n  vec4 o = vec4(1, 1, 1, 1);\n  #if USE_TEXTURE\n  vec4 texture_tmp = texture(texture, v_uv0);\n  #if CC_USE_ALPHA_ATLAS_texture\n      texture_tmp.a *= texture(texture, v_uv0 + vec2(0, 0.5)).r;\n  #endif\n  #if INPUT_IS_GAMMA\n    o.rgb *= (texture_tmp.rgb * texture_tmp.rgb);\n    o.a *= texture_tmp.a;\n  #else\n    o *= texture_tmp;\n  #endif\n  #endif\n  o *= maskColor;\n  vec2 pos = focusCenter / resolution;\n  if(focusShape == 1.0)\n  {\n    vec2 size = focusSize / resolution;\n    if(abs(pos.x - v_uv0.x) <= size.x && abs(pos.y - v_uv0.y) <= size.y)\n    {\n      o.a = 0.0;\n    }\n  }\n  else if(focusShape == 2.0)\n  {\n    float ratio = resolution.y / resolution.x;\n    float dist_x = abs(pos.x - v_uv0.x);\n    float dist_y = abs(pos.y - v_uv0.y) * ratio;\n    float dist = sqrt(dist_x * dist_x + dist_y * dist_y);\n    if(dist <= focusRadius / resolution.x)\n    {\n      o.a = 0.0;\n    }\n  }\n  o *= v_color;\n  ALPHA_TEST(o);\n  gl_FragColor = o;\n}"},"glsl1":{"vert":"\nprecision highp float;\nuniform mat4 cc_matViewProj;\nuniform mat4 cc_matWorld;\nattribute vec3 a_position;\nattribute vec4 a_color;\nvarying vec4 v_color;\nattribute vec2 a_uv0;\nvarying vec2 v_uv0;\nvoid main () {\n  vec4 pos = vec4(a_position, 1);\n  #if CC_USE_MODEL\n  pos = cc_matViewProj * cc_matWorld * pos;\n  #else\n  pos = cc_matViewProj * pos;\n  #endif\n  v_uv0 = a_uv0;\n  v_color = a_color;\n  gl_Position = pos;\n}","frag":"\nprecision highp float;\n#if USE_ALPHA_TEST\n  uniform float alphaThreshold;\n#endif\nvoid ALPHA_TEST (in vec4 color) {\n  #if USE_ALPHA_TEST\n      if (color.a < alphaThreshold) discard;\n  #endif\n}\nvoid ALPHA_TEST (in float alpha) {\n  #if USE_ALPHA_TEST\n      if (alpha < alphaThreshold) discard;\n  #endif\n}\nvarying vec4 v_color;\nuniform vec4 maskColor;\nuniform vec2 resolution;\nuniform vec2 focusSize;\nuniform vec2 focusCenter;\nuniform float focusShape;\nuniform float focusRadius;\nvarying vec2 v_uv0;\n#if USE_TEXTURE\nuniform sampler2D texture;\n#endif\nvoid main () {\n  vec4 o = vec4(1, 1, 1, 1);\n  #if USE_TEXTURE\n  vec4 texture_tmp = texture2D(texture, v_uv0);\n  #if CC_USE_ALPHA_ATLAS_texture\n      texture_tmp.a *= texture2D(texture, v_uv0 + vec2(0, 0.5)).r;\n  #endif\n  #if INPUT_IS_GAMMA\n    o.rgb *= (texture_tmp.rgb * texture_tmp.rgb);\n    o.a *= texture_tmp.a;\n  #else\n    o *= texture_tmp;\n  #endif\n  #endif\n  o *= maskColor;\n  vec2 pos = focusCenter / resolution;\n  if(focusShape == 1.0)\n  {\n    vec2 size = focusSize / resolution;\n    if(abs(pos.x - v_uv0.x) <= size.x && abs(pos.y - v_uv0.y) <= size.y)\n    {\n      o.a = 0.0;\n    }\n  }\n  else if(focusShape == 2.0)\n  {\n    float ratio = resolution.y / resolution.x;\n    float dist_x = abs(pos.x - v_uv0.x);\n    float dist_y = abs(pos.y - v_uv0.y) * ratio;\n    float dist = sqrt(dist_x * dist_x + dist_y * dist_y);\n    if(dist <= focusRadius / resolution.x)\n    {\n      o.a = 0.0;\n    }\n  }\n  o *= v_color;\n  ALPHA_TEST(o);\n  gl_FragColor = o;\n}"},"builtins":{"globals":{"blocks":[{"name":"CCGlobal","defines":[]}],"samplers":[]},"locals":{"blocks":[{"name":"CCLocal","defines":[]}],"samplers":[]}},"defines":[{"name":"CC_USE_MODEL","type":"boolean","defines":[]},{"name":"USE_ALPHA_TEST","type":"boolean","defines":[]},{"name":"USE_TEXTURE","type":"boolean","defines":[]},{"name":"CC_USE_ALPHA_ATLAS_texture","type":"boolean","defines":["USE_TEXTURE"]},{"name":"INPUT_IS_GAMMA","type":"boolean","defines":["USE_TEXTURE"]}],"blocks":[{"name":"ALPHA_TEST","binding":0,"members":[{"name":"alphaThreshold","type":13,"count":1}],"defines":["USE_ALPHA_TEST"]},{"name":"Constant","binding":1,"members":[{"name":"maskColor","type":16,"count":1},{"name":"resolution","type":14,"count":1},{"name":"focusSize","type":14,"count":1},{"name":"focusCenter","type":14,"count":1},{"name":"focusShape","type":13,"count":1},{"name":"focusRadius","type":13,"count":1}],"defines":[]}],"samplers":[{"name":"texture","type":29,"count":1,"binding":30,"defines":["USE_TEXTURE"]}]}],[{"passes":[{"program":"guide-mask|vs|fs","blendState":{"targets":[{"blend":true}]},"rasterizerState":{"cullMode":0},"properties":{"texture":{"value":"white","type":29},"alphaThreshold":{"type":13,"value":[0.5]},"resolution":{"type":14,"value":[1,1]},"maskColor":{"type":16,"value":[1,1,1,1],"editor":{"type":"color"}},"focusShape":{"type":13,"value":[0]},"focusRadius":{"type":13,"value":[1]},"focusSize":{"type":14,"value":[1,1]},"focusCenter":{"type":14,"value":[0,0]}}}]}]]],0,0,[],[],[]],[[[1,"guide-mask",[{},"0",11,[{"defines":{"USE_TEXTURE":true}},"props",11,[{"focusRadius":100,"focusShape":1},"resolution",8,[0,750,1334],"focusCenter",8,[0,375,750],"focusSize",8,[0,100,100],"maskColor",8,[4,2080374784],"texture",6,0]]]]],0,0,[0,0],[1,2],[0,1]],[[[2,"PF_Guide_Mask"],[3,"PF_Guide_Mask",[[4,0,-2,[0],1],[5,45,40,36,-3]],[6,-1],[5,750,1334],[375,667,0,0,0,0,1,1,1,1]]],0,[0,3,1,0,0,1,0,0,1,0,4,1,3],[0,0],[-1,5],[2,3]]]]